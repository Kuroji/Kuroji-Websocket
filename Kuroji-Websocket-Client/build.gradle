buildscript {
    ext.kotlin_version = '1.2.21'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'xyz.astolfo.websocket'
version '0.0.1'

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

configurations {
    localCompile.transitive = false
    compile.extendsFrom(localCompile)
    localTransitive.extendsFrom(localCompile)
}

dependencies {
    compile 'io.grpc:grpc-protobuf:1.10.0'
    compile 'org.apache.curator:curator-x-async:4.0.1'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.2'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-guava:0.22.2'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:0.22.2'
    compile 'com.github.salomonbrys.kotson:kotson:2.5.0'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    localCompile project(":kuroji-websocket-shared")
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

jar {
    from {
        configurations.localCompile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.compile.allDependencies.stream()
                        .filter {!configurations.localCompile.dependencies.contains(it)}
                        .each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'compile')
                }
                configurations.localTransitive.resolvedConfiguration.firstLevelModuleDependencies.each {
                    it.children.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.moduleGroup)
                        dependencyNode.appendNode('artifactId', it.moduleName)
                        dependencyNode.appendNode('version', it.moduleVersion)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }
            }
        }
    }
}
